kind : pipeline
name : CI
type : docker
trigger :
  event :
    - push
    - tag

volumes :
  - name : m2cache
    host :
      path : /app/.m2

steps :

  - name : build
    image : docker-registry.c2a2.com/ujar/maven:3-openjdk-17-slim
    pull : if-not-exists
    volumes :
      - name : m2cache
        path : /root/.m2
    environment :
      DEPLOYER_USERNAME :
        from_secret : DEPLOYER_USERNAME
      DEPLOYER_PASSWORD :
        from_secret : DEPLOYER_PASSWORD
      SONAR_HOST :
        from_secret : SONAR_HOST
      SONAR_TOKEN :
        from_secret : SONAR_TOKEN
    commands :
      - mvn clean compile test-compile -B -s ../maven-settings.xml -Ddeployer.username=$DEPLOYER_USERNAME -Ddeployer.password=$DEPLOYER_PASSWORD
      - mvn pmd:check -B -s ../maven-settings.xml -Ddeployer.username=$DEPLOYER_USERNAME -Ddeployer.password=$DEPLOYER_PASSWORD
      - mvn com.github.spotbugs:spotbugs-maven-plugin:4.7.3.0:check -s ../maven-settings.xml -Ddeployer.username=$DEPLOYER_USERNAME -Ddeployer.password=$DEPLOYER_PASSWORD  -Dspotbugs.xmlOutput=true -Dspotbugs.failOnError=true -Dspotbugs.excludeFilterFile=../spotbugs-exclude.xml -Dspotbugs.includeTests=true
      - mvn org.jacoco:jacoco-maven-plugin:prepare-agent package org.jacoco:jacoco-maven-plugin:report sonar:sonar -Dsonar.host.url=$SONAR_HOST -Dsonar.login=$SONAR_TOKEN -Dsonar.projectKey=org.ujar:ujar-boot-restful -Dsonar.projectName=org.ujar:ujar-boot-restful --batch-mode  -s ../maven-settings.xml -Ddeployer.username=$DEPLOYER_USERNAME -Ddeployer.password=$DEPLOYER_PASSWORD

    when :
      event :
        - push
        - tag

  - name : publish-snapshot-jar
    image : docker-registry.c2a2.com/ujar/maven:3-openjdk-17-slim
    pull : if-not-exists
    volumes :
      - name : m2cache
        path : /root/.m2
    environment :
      DEPLOYER_USERNAME :
        from_secret : DEPLOYER_USERNAME
      DEPLOYER_PASSWORD :
        from_secret : DEPLOYER_PASSWORD
    commands :
      - mvn deploy -DskipTests=true -Dcheckstyle.skip=true -s ../maven-settings.xml -Ddeployer.username=$DEPLOYER_USERNAME -Ddeployer.password=$DEPLOYER_PASSWORD -DaltDeploymentRepository=ujar-snapshots-repository::default::https://nexus.c2a2.com/repository/maven-snapshots
    when :
      branch :
        include :
          - "feature/*"
          - "develop"
          - "*.*.x"
    depends_on :
      - build

  - name : publish-release-jar
    image : docker-registry.c2a2.com/ujar/maven:3-openjdk-17-slim
    pull : if-not-exists
    volumes :
      - name : m2cache
        path : /root/.m2
    environment :
      DEPLOYER_USERNAME :
        from_secret : DEPLOYER_USERNAME
      DEPLOYER_PASSWORD :
        from_secret : DEPLOYER_PASSWORD
    commands :
      - mvn deploy -X -DskipTests=true -Dcheckstyle.skip=true -s ../maven-settings.xml -Ddeployer.username=$DEPLOYER_USERNAME -Ddeployer.password=$DEPLOYER_PASSWORD -DaltDeploymentRepository=ujar-releases-repository::default::https://nexus.c2a2.com/repository/maven-releases
    when :
      ref :
        - "refs/tags/*"
    depends_on :
      - build

---

kind : pipeline
name : CreateReleaseManually
type : docker
trigger :
  event :
    - custom
  branch :
    - "develop"
    - "*.*.x"

volumes :
  - name : m2cache
    host :
      path : /app/.m2

steps :
  - name : create-release-tag
    image : docker-registry.c2a2.com/ujar/maven:3-openjdk-17-slim
    pull : if-not-exists
    volumes :
      - name : m2cache
        path : /root/.m2
    commands :
      - echo Prepare new version ${TAG}
      - mkdir ${TAG}
      - rmdir ${TAG}
      - export NEXT_SNAPSHOT=$(increment_version -${INCREMENT_TYPE} ${TAG})-SNAPSHOT
      - export GIT_AUTHOR_NAME=$${SVC_BUILD_GIT_USERNAME}
      - export GIT_AUTHOR_EMAIL=$${SVC_BUILD_GIT_EMAIL}
      - export GIT_COMMITTER_NAME=$${SVC_BUILD_GIT_USERNAME}
      - export GIT_COMMITTER_EMAIL=$${SVC_BUILD_GIT_EMAIL}
      - git remote set-url --push origin ${DRONE_GIT_SSH_URL}
      - git checkout -b v${TAG}
      - mvn versions:set -DnewVersion=${TAG}
      - >-
        git commit -a -m "feat: bump version to $${TAG}"
      - git tag ${TAG} && git push origin ${TAG}
      - echo "âœ… Release tag ${TAG} was created."
      - sleep 10
      - git tag -d ${TAG} && git checkout ${DRONE_COMMIT_BRANCH} && git branch -D v${TAG}
      - mvn versions:set -DnewVersion=$${NEXT_SNAPSHOT}
      - >-
        git commit -a -m "feat: create new $${NEXT_SNAPSHOT}"
      - git push origin ${DRONE_COMMIT_BRANCH}
      - echo "âœ… Started $${NEXT_SNAPSHOT}."
      - echo "ðŸš€ Good job, new version ${TAG} was released successfully."
